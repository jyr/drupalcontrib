<?php
//$id$

function _media_ytplayer_loading() {
  $path = dirname(__FILE__);
  require_once $path . "/skins/skins.inc";
  
  _media_ytplayer_init_skins();
  
  return $path;
}

/**
 * Implementation of hook_help().
 */
function media_ytplayer_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#media_ytplayer":
      $ouput .= '<p>' . t("Help me with more documentation.") . '</p>';
      break;
  }
  
  return $output;
}

/**
 * Implementation of hook_theme().
 */
function media_ytplayer_theme() {
  _media_ytplayer_loading();
  $path = drupal_get_path('module', 'media_ytplayer');
  $skin = variable_get('media_ytplayer_skins', 'default');
  
  $base = array(
    'file' => 'skins.inc',
    'path' => "$path/skins/$skin",
  );
  
  $embed = array(
    'file' => 'embed.theme.inc',
    'path' => "$path/embed",
  );
 
  return array(
    $skin => $base + array(
      'template' => $skin,
      'arguments' => array('vars' => NULL),
    ),
    'embed_youtube_viewer' => $embed + array(
      'template' => 'embed_youtube_viewer',
      'arguments' => 
          array('nodes' => NULL, 'width' => NULL, 'height' => NULL, 'field' => _media_ytplayer_field_name(), 
                'url' => 'http://www.youtube.com/v/', 'args' => '?enablejsapi=1&playerapiid=ytplayer'),
    ),
  );
}

/**
 * Implementation of hook_block().
 */
function media_ytplayer_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == "list") {
    $block = array();
    $block[0]["info"] = t("Player Youtube");
  }
  elseif ($op == "view") {
    _media_ytplayer_loading();
    $skin = variable_get('media_ytplayer_skins', 'default');
    $content = _media_ytplayer_videos();
    
    $block['subject'] = "Playlist";
    if ($content == '') {
      $block['content'] = t("Sorry no content");
    }
    else {
      $block['content'] = theme($skin, $content);
    }
  }
  
  return $block;
}

function media_ytplayer_admin() {
  $form = array();
  $options = _media_ytplayer_content_type();
  
  $form['media_ytplayer_type'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enabled content type'),
    '#options' => $options,
    '#default_value' => variable_get('media_ytplayer_type', array()),
    '#description' => t('Content type with field of video'),
    //'#required' => TRUE,
  );
  
  $skins = _media_ytplayer_get_skins();
  $form['media_ytplayer_skins'] = array(
    '#type' => 'radios',
    '#title' => t('skins'),
    '#options' => $skins,
    '#default_value' => variable_get('media_ytplayer_skins', 'default'),
    '#description' => t('Select your favorite skins'),
    //'#required' => TRUE,
  );
  
  $form['media_ytplayer_order'] = array(
    '#type' => 'radios',
    '#title' => t('Order videos'),
    '#options' => array('desc' => t('Descending'), 'asc' => t('Ascending')),
    '#default_value' => variable_get('media_ytplayer_order', 'desc'),
    '#description' => t(''),
    //'#required' => TRUE,
  );
  
  $form['media_ytplayer_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Limit'),
    '#default_value' => variable_get("media_ytplayer_limit", 3),
    '#size' => 10,
    '#maxlenght' => 10,
    '#description' => t('Limit of videos to show'),
    //'#required' => TRUE,
  );
  
  return system_settings_form($form);
}

function _media_ytplayer_content_type() {
  $fieldTypes = array_keys(_content_field_types());
  $contentTypes = content_types();
  foreach ($contentTypes as $k => $content_type) {
    foreach ($content_type['fields'] as $key => $fields) {
      $field_type = $fields['type'];
    }
    if (in_array($field_type, $fieldTypes)) {
      $options[$k] = $content_type['name'];
      unset($field_type);
    }
  }
  
  return $options;
}

function _media_ytplayer_get_skins() {
  $path = dirname(__FILE__) . "/skins/";
  $skins = opendir($path);
  while (($directory = readdir($skins)) !== FALSE ) { 
    if (is_dir($path . $directory) && $directory != "." && $directory != "..") { 
      $options[$directory] = ucwords(strtolower($directory));
    }
  }
  
  return $options;
}

function _media_ytplayer_field_name() {
  $fieldTypes = array_keys(_content_field_types());
  $contentTypes = content_types();
  foreach ($contentTypes as $k => $content_type) {
    foreach ($content_type['fields'] as $key => $fields) {
      $field_name[] = $fields['field_name'];
    }
  }
  
  return $field_name;
}

function _media_ytplayer_videos() {
  $content = '';
  $nodes = array();
  $types = variable_get("media_ytplayer_type", "");
  $limit = variable_get("media_ytplayer_limit", 2);
  $order = variable_get('media_ytplayer_order', 'desc');

  $contentTypes = '';
  if (isset($types) && !empty($types)) {
    foreach ($types as $type) {
      if (!empty($type)) {
        $contentTypes .= "'" . $type . "' "; 
      }
    }
    
    if (!empty($contentTypes)) {
      $contentTypes = str_replace("' '", "','", $contentTypes);

      $query = "SELECT node.nid AS nid, node.created 
                FROM {node} node  
                WHERE node.type in (" . $contentTypes . ") 
                ORDER BY `node`.`created` " . $order . " LIMIT " . $limit . "";
                
      $rq = db_rewrite_sql($query);
      $result = db_query($rq);

      while ($data = db_fetch_object($result)) {
        $nodes[] = node_load($data->nid);
      }

      $data = array(
        'nodes' => $nodes,
      );
    }
    return $data;
  }
}

function media_ytplayer_admin_validate($form, &$form_state) {
  $type = $form_state['values']['media_ytplayer_type'];
  $limit =  (int) $form_state['values']['media_ytplayer_limit'];

  if ($limit <= 0) { 
      form_set_error('media_ytplayer_limit', t('You must enter a numeric value'));
  }
  
}

function media_ytplayer_menu() {
  $items = array();
  
  $items['admin/settings/media_ytplayer'] = array(
    'title' => 'Embedded Media Player',
    'description' => 'Configuration for Embedded Media Player',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_ytplayer_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}